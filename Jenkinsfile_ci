pipeline {
    agent any

    environment {
        DB_HOST = "mysql"
        DB_PORT = "3306"
        DB_DATABASE = "perpus"
        DB_USERNAME = "root"
        DB_PASSWORD = "12345678"

        DOCKER_IMAGE = "nurghulam/pso-cicd"
        DOCKER_TAG = "latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/NurGhulam04/fp-pso.git', branch: 'update'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'docker run --rm -v $(pwd):/app -w /app php:8.3-cli bash -c "apt update && apt install -y unzip git zip libxml2-dev && docker-php-ext-install dom && curl -sS https://getcomposer.org/installer | php && php composer.phar install"'
            }
        }


        stage('Test') {
            steps {
                sh'./vendor/bin/phpunit'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t laravel-app .'
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh '''
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker tag laravel-app $DOCKER_IMAGE:$DOCKER_TAG
                        docker push $DOCKER_IMAGE:$DOCKER_TAG
                        docker logout
                    '''
                }
            }
        }
        stage('Merge to Main and Push') {
            steps {
                // Menggunakan credentials GitHub yang sudah disimpan di Jenkins
                // Ganti 'github-repo-creds' dengan ID credentials GitHub Anda
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                    // MENGGUNAKAN KUTIP TUNGGAL (') UNTUK MENCEGAH GROOVY INTERPOLATION
                    sh '''
                        # Konfigurasi identitas Git untuk commit merge (opsional tapi baik)
                        git config --global user.email "ghulammusthafa04@gmail.com"
                        git config --global user.name "NurGhulam04"

                        # Fetch semua perubahan dari remote, termasuk tags, dan hapus branch remote yang sudah tidak ada
                        git fetch origin --prune --tags

                        # Checkout ke branch 'main', pastikan up-to-date dengan remote 'main'
                        # Variabel di bawah ini akan diganti oleh shell, bukan Groovy
                        git checkout -B "$GIT_TARGET_BRANCH" "origin/$GIT_TARGET_BRANCH"

                        # Merge branch 'update' ke 'main'
                        echo "Merging branch 'origin/$GIT_SOURCE_BRANCH' into '$GIT_TARGET_BRANCH'"
                        git merge "origin/$GIT_SOURCE_BRANCH" -m "Jenkins: Auto-merge branch '$GIT_SOURCE_BRANCH' into '$GIT_TARGET_BRANCH' after successful Docker push"

                        # Push perubahan (termasuk merge commit) ke branch 'main' di remote repository
                        # Variabel GITHUB_USER dan GITHUB_TOKEN dari withCredentials juga akan diganti oleh shell
                        echo "Pushing '$GIT_TARGET_BRANCH' to origin"
                        git push "https://$GITHUB_USER:$GITHUB_TOKEN@github.com/NurGhulam04/fp-pso.git" "$GIT_TARGET_BRANCH"
                    '''
                }
            }
        }
    }

    post {
        always {
            // Membersihkan workspace setelah build selesai
            cleanWs()
            // Contoh: Hapus image docker lokal yang sudah tidak terpakai untuk menghemat ruang
            sh "docker rmi ${DOCKER_IMAGE_NAME} || true" // || true agar tidak error jika image tidak ada
            sh "docker rmi ${DOCKERHUB_REPO}:${DOCKERHUB_TAG} || true"
        }
    }
}
